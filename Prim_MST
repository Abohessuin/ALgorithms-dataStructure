#include <bits/stdc++.h>

using namespace std;

struct edge
{

    int from,to,w;
    edge(int f,int t,int ww)
    {
        from=f;
        to=t;
        w=ww;
    }
    bool operator <(const edge &e) const
    {
      return w>e.w;
    }
};

pair<int,vector<edge>>prim_MST(vector<vector<edge>>adjlist)
{
    int n=adjlist.size(),mstcost=0;
    int vis[n]={0};
    vector<edge>edges;
    priority_queue<edge>q;
    q.push(edge(-1,0,0));
    while(!q.empty())
    {
        edge e=q.top();
        q.pop();
        if(vis[e.to]) continue;
        vis[e.to]=1;
        mstcost+=e.w;
        if(e.to)  edges.push_back(e);
        for(int i=0;i<adjlist[e.to].size();++i)
        {
            edge ne=adjlist[e.to][i];
            if(!vis[ne.to])
                q.push(ne);
        }
    }
    if(edges.size()!=n-1) return make_pair(-00,vector<edge>());
    return make_pair(mstcost,edges);

}
int main()
{


   int e,x,y,w;
   cin>>e;
   vector<vector<edge>>adjlist(e+1);
   adjlist[0].push_back(edge(0,1,0));

    for(int i=0;i<e;++i)
    {

        cin>>x>>y>>w;
        adjlist[x].push_back(edge(x,y,w));
        adjlist[y].push_back(edge(y,x,w));

    }

    pair<int,vector<edge>>v;
    v=prim_MST(adjlist);
    cout<<v.first;
    return 0;

}
